Player / Server
----------------------------------------
Uses stdin(>)/stdout(<) or sockets. Commands are separated with \n, \r or \n\r
In pattern: <command> <arg> where <arg> is a json-like string, for example:
    <prop1>:<value1>, <prop2>:<value2>
        where propX/valueX may be wrapped with quotes (")
    <val1>,<val2>,<val3>
        where vals are wrapped with quotes (")
Out pattern: the same, but <arg> is a string

> join <userName> [#<hubName>]
< wait
< start "players":"<playersCount>","map":"<mapName>","rows":"<rows>","cols":"<cols>","you":"<yourId>" \
            "dogVisibilityR":"<radius>","dogBarkingR":"<distance>",\
            "sheepStandBy": "<num-of-turns>", "sheepScaryTurns":"<num-of-turns>", "dogScaryTurns": "<num-of-turns>"
< landscape "#1.2","#12.",...
< state turn:1
#For dog
< obj id:1,x:2,y:3,owner:1,type:Dog[,voice:barking][,action=move|panic|indignant]
#For sheep
< obj x:2,y:4,type:Sheep[,direction:left|down|right|up][,action=move|standBy|panic]
#For unknown voice
< obj x:10,y:15,voice:Barking
< turn
> do 1 move up
> do 2 move down
> end
...
< finished winner:<id>


Viewer/Server
--------------------------
<--- list [<game>, <game>, ...]
---> list
<--- list [<game>, <game>, ...]
---> listen <gameId>
<--- view <gameId> <gameState>
<--- end <gameId> {...last map state..., winner: , stopReason}
<--- error <gameId> <error>

<game> = {
    id: <id>, map: <map>, players: [<name1>,...], finished: <tf>, stopReason: <reason>}
}
<error> = string

<gameId> = integer
<gameState> = {
    turn: <turn>,
    landscape: [
        "#.12",
        "...."
    ],
    objects: [
         {id: <id>, type: <type>, x: <x>, y: <y>, movedFromX: <x>, movedFromY: <y>, state: <stateString>, owner: <playerId>},
         ...
    ],
    players: [
        {id: <playerId>, name: <playerName>, score: <score>},
        ...
    ]
}


